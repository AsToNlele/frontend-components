"use strict";function _interopDefault(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var axiosInstanceInsights=_interopDefault(require("@redhat-cloud-services/frontend-components-utilities/files/cjs/interceptors")),constants=require("./constants.js"),axiosInstance=axiosInstanceInsights,getSourcesApi=function getSourcesApi(){return{createEndpoint:function createEndpoint(t){return axiosInstanceInsights.post("".concat(constants.SOURCES_API_BASE,"/endpoints"),t)},createAuthentication:function createAuthentication(t){return axiosInstanceInsights.post("".concat(constants.SOURCES_API_BASE,"/authentications"),t)},deleteSource:function deleteSource(t){return axiosInstanceInsights.delete("".concat(constants.SOURCES_API_BASE,"/sources/").concat(t))},createApplication:function createApplication(t){return axiosInstanceInsights.post("".concat(constants.SOURCES_API_BASE,"/applications"),t)},postGraphQL:function postGraphQL(t){return axiosInstanceInsights.post("".concat(constants.SOURCES_API_BASE,"/graphql"),t)},listSourceTypes:function listSourceTypes(){return axiosInstanceInsights.get("".concat(constants.SOURCES_API_BASE,"/source_types"))},listApplicationTypes:function listApplicationTypes(){return axiosInstanceInsights.get("".concat(constants.SOURCES_API_BASE,"/application_types"))},createSource:function createSource(t){return axiosInstanceInsights.post("".concat(constants.SOURCES_API_BASE,"/sources"),t)},createAuthApp:function createAuthApp(t){return axiosInstanceInsights.post("".concat(constants.SOURCES_API_BASE_V2,"/application_authentications"),t)},getApplication:function getApplication(t){return axiosInstanceInsights.get("".concat(constants.SOURCES_API_BASE_V2,"/applications/").concat(t))},removeSource:function removeSource(t){return axiosInstanceInsights.delete("".concat(constants.SOURCES_API_BASE_V2,"/sources/").concat(t))}}},doLoadSourceTypes=function doLoadSourceTypes(){return getSourcesApi().listSourceTypes().then((function(t){return{sourceTypes:t.data}}))},doLoadApplicationTypes=function doLoadApplicationTypes(){return getSourcesApi().listApplicationTypes().then((function(t){return{applicationTypes:t.data}}))},findSource=function findSource(t){return getSourcesApi().postGraphQL({query:'{ sources(filter: {name: "'.concat(t,'"})\n        { id, name }\n    }')})};exports.axiosInstance=axiosInstance,exports.doLoadApplicationTypes=doLoadApplicationTypes,exports.doLoadSourceTypes=doLoadSourceTypes,exports.findSource=findSource,exports.getSourcesApi=getSourcesApi;
